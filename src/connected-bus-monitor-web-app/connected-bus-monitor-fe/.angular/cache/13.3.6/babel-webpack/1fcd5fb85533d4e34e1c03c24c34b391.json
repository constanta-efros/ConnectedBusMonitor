{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators'; //import { Hero } from './hero';\n\nimport { Bus } from './bus';\nimport { AirQuality } from \"./air-quality\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport let BusMonitorService = /*#__PURE__*/(() => {\n  class BusMonitorService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService; //api/buses';\n\n      this.busMonitorUrl = 'https://w7zasr9b9i.execute-api.us-east-1.amazonaws.com/bus'; // URL to web api\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    /** GET buses from the server */\n\n    /*\n    getBuses(): Observable<Bus[]> {\n      return this.http.get<Bus[]>(this.busMonitorUrl)\n        .pipe(\n          tap(_ => this.log('fetched buses')),\n          catchError(this.handleError<Bus[]>('getBuses', []))\n        );\n    } */\n\n    /** GET buses from the server */\n\n\n    getBuses() {\n      return this.http.get(this.busMonitorUrl).pipe(map(data => {\n        // this.log('response' + res.toString())\n        let response = data.response;\n        console.log('response', response);\n        let buses = response.av_bus; // this.log('fetched buses' + buses)\n\n        console.log('fetched buses', buses);\n        return buses;\n      }), catchError(this.handleError('getBuses', [])));\n    }\n    /** GET bus by id. Return `undefined` when id not found */\n\n\n    getBusNo404(id) {\n      const url = `${this.busMonitorUrl}/?id=${id}`;\n      return this.http.get(url).pipe(map(heroes => heroes[0]), // returns a {0|1} element array\n      tap(h => {\n        const outcome = h ? 'fetched' : 'did not find';\n        this.log(`${outcome} hero id=${id}`);\n      }), catchError(this.handleError(`getHero id=${id}`)));\n    }\n    /** GET bus by id. Will 404 if id not found */\n\n\n    getBus(id) {\n      const url = `${this.busMonitorUrl}/${id}`;\n      return this.http.get(url).pipe(map(data => {\n        let air_quality_records = data.response;\n        let airQualityList = [];\n\n        for (let air_quality_record of air_quality_records) {\n          console.log(air_quality_record);\n          let record_value = new AirQuality(air_quality_record.air_data.bus, air_quality_record.date, air_quality_record.air_data.temperature, air_quality_record.air_data.humidity, air_quality_record.air_data.co2, air_quality_record.air_data.air_quality);\n          airQualityList.push(record_value);\n        }\n\n        const sortedAirQualityList = airQualityList.sort((objA, objB) => new Date(objA.date).getTime() - new Date(objB.date).getTime());\n        let bus = new Bus(data.response[0].bus_id, sortedAirQualityList);\n        console.log('bus', bus);\n        return bus;\n      }), catchError(this.handleError(`getBus id=${id}`)));\n    }\n    /**\n     * Handle Http operation that failed.\n     * Let the app continue.\n     *\n     * @param operation - name of the operation that failed\n     * @param result - optional value to return as the observable result\n     */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a BusMonitorService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`BusMonitorService: ${message}`);\n    }\n\n  }\n\n  BusMonitorService.ɵfac = function BusMonitorService_Factory(t) {\n    return new (t || BusMonitorService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  BusMonitorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BusMonitorService,\n    factory: BusMonitorService.ɵfac,\n    providedIn: 'root'\n  });\n  return BusMonitorService;\n})();","map":null,"metadata":{},"sourceType":"module"}